import ctypes
vmcode = [0x01, 0x00, 0x00, 0x01, 0xBB, 0xAA, 0x06, 
          0x01, 0x00, 0x01, 0x01, 0xDD, 0xCC, 0x06, 
          0x01, 0x00, 0x02, 0x01, 0xFF, 0xEE, 0x06, 
          0x01, 0x00, 0x03, 0x01, 0xAD, 0xDE, 0x06, 
          0x01, 0x00, 0x04, 0x01, 0xEF, 0xBE, 0x06, 
          0x01, 0x00, 0x05, 0x01, 0xFE, 0xCA, 0x06, 
          0x01, 0x00, 0x06, 0x01, 0xBE, 0xBA, 0x06, 
          0x01, 0x00, 0x07, 0x01, 0xCD, 0xAB, 0x06, 
          0x01, 0x00, 0x0A, 0x01, 0x61, 0x44, 0x06, 
          0x01, 0x00, 0x0B, 0x01, 0x75, 0x34, 0x06, 
          0x01, 0x00, 0x0C, 0x01, 0x69, 0x62, 0x06, 
          0x01, 0x00, 0x0D, 0x01, 0x6C, 0x63, 0x06, 
          0x01, 0x00, 0x0E, 0x01, 0x31, 0x65, 0x06, 
          0x01, 0x00, 0x0F, 0x01, 0x66, 0x69, 0x06, 
          0x01, 0x00, 0x10, 0x01, 0x62, 0x65, 0x06, 
          0x01, 0x00, 0x11, 0x01, 0x62, 0x30, 0x06, 
          0x01, 0x00, 0x08, 0x01, 0x00, 0x03, 
          0x05, 
          0x01, 0x00, 0x30, 
          0x1E, 
          0x01, 0x00, 0x02,   #a
          0x05, 
          0x01, 0x00, 0x20, 
          0x1E, 
          0x1B, 
          0x01, 0x00, 0x01, 
          0x05, 
          0x01, 0x00, 0x10, 
          0x1E, 
          0x1B, 
          0x01, 0x00, 0x00, 
          0x05, 
          0x1B, 
          0x06, 
          0x01, 0x00, 0x09, 
          0x01, 0x00, 0x07, 
          0x05, 
          0x01, 0x00, 0x30, 
          0x1E, 
          0x01, 0x00, 0x06, 
          0x05, 
          0x01, 0x00, 0x20, 
          0x1E, 
          0x1B, 
          0x01, 0x00, 0x05, 
          0x05, 
          0x01, 0x00, 0x10, 
          0x1E, 
          0x1B, 
          0x01, 0x00, 0x04, 
          0x05, 
          0x1B, 
          0x06, 
          0x01, 0x00, 0x12, 
          0x01, 0x00, 0x0D, 
          0x05, 
          0x01, 0x00, 0x30, 
          0x1E, 
          0x01, 0x00, 0x0C, 
          0x05, 
          0x01, 0x00, 0x20, 
          0x1E, 
          0x1B, 0x01, 0x00, 0x0B, 0x05, 0x01, 0x00, 0x10, 0x1E, 0x1B, 0x01, 0x00, 0x0A, 0x05, 0x1B, 0x06, 0x01, 0x00, 0x13, 0x01, 0x00, 0x11, 0x05, 0x01, 0x00, 0x30, 0x1E, 0x01, 0x00, 0x10, 0x05, 0x01, 0x00, 0x20, 0x1E, 0x1B, 0x01, 0x00, 0x0F, 0x05, 0x01, 0x00, 0x10, 
          0x1E, 
          0x1B, 
          0x01, 0x00, 0x0E, 
          0x05, 0x1B, 0x06, 0x01, 0x00, 0x14, 0x01, 0x00, 0x00, 0x06, 0x01, 0x00, 0x18, 0x01, 0x00, 0x01, 0x06, 0x01, 0x00, 0x17, 0x01, 0x00, 0x00, 0x06, 0x01, 0x00, 0x19, 0x01, 0x00, 0x00, 0x06, 0x01, 0x00, 0x18, 0x05, 0x01, 0x00, 0x01, 
          0x11, 
          0x10, 0x02, 0x41, 
          0x01, 0x00, 0x14, 0x05, 
          0x01, 0x00, 0x08, 
          0x12, 
          0x10, 0x01, 0x50, 
          0x01, 0x00, 0x15, 0x01, 0x00, 0x08, 0x05, 0x01, 0x00, 0x08, 0x01, 0x00, 0x14, 
          0x05, 
          0x0D, 
          0x1F, 
          0x06, 
          0x01, 0x00, 0x16, 
          0x01, 0x00, 0x12, 0x05, 0x01, 0x00, 0x08, 0x01, 0x00, 0x14, 0x05, 
          0x0D, 0x1F, 0x06, 0x01, 0x00, 0x14, 
          0x05, 
          0x01, 0x00, 0x07, 
          0x14, 
          0x10, 0x01, 0x7D, 
          0x01, 0x00, 0x15, 0x01, 0x00, 0x09, 0x05, 0x01, 0x00, 0x08, 0x01, 0x00, 0x14, 
          0x05, 
          0x0D, 0x1F, 0x06, 0x01, 0x00, 0x16, 0x01, 0x00, 0x13, 0x05, 0x01, 0x00, 0x08, 
          0x01, 0x00, 0x14, 
          0x05, 
          0x0D, 0x1F, 0x06, 
          0x01, 0x00, 0x15,     # 0x17d
          0x01, 0x00, 0x15, 
          0x05, 
          0x01, 0x00, 0xFF, 
          0x1C, 0x06, 0x01, 0x00, 0x16, 0x01, 0x00, 0x16, 0x05, 0x01, 0x00, 0xFF, 0x1C, 0x06, 0x01, 0x00, 0x14, 0x05, 0x01, 0x00, 0x02, 
          0x11, 
          0x10, 0x01, 0xAC, 
          0x01, 0x00, 0x16, 
          0x01, 0x00, 0x16, 
          0x05, 
          0x01, 0x00, 0x04, 
          0x24, 
          0x06, 
          0x01, 0x00, 0x14, 
          0x05, 0x01, 0x00, 0x09, 0x11, 0x10, 0x01, 0xC3, 0x01, 0x00, 0x16, 0x01, 0x00, 0x16, 0x05, 0x01, 0x00, 0x02, 0x25, 0x06, 
          0x01, 0x00, 0x14, 
          0x05, 0x01, 0x00, 0x0D, 0x11, 0x10, 0x01, 0xDA, 0x01, 0x00, 0x16, 0x01, 0x00, 0x16, 0x05, 0x01, 0x00, 0x07, 0x24, 0x06, 
          0x01, 0x00, 0x14, 
          0x05, 0x01, 0x00, 0x0F, 0x11, 0x10, 0x01, 0xF1, 0x01, 0x00, 0x16, 0x01, 0x00, 0x16, 0x05, 0x01, 0x00, 0x07, 0x24, 0x06, 0x01, 0x00, 0x15, 0x05, 0x01, 0x00, 0x16, 0x05, 0x11, 0x01, 0x00, 0x00, 0x11, 0x10, 0x02, 0x08, 0x01, 0x00, 0x18, 0x01, 0x00, 0x00, 0x06, 0x01, 0x00, 0x15, 0x05, 0x01, 0x00, 0x16, 0x05, 0x11, 0x10, 0x02, 0x20, 0x01, 0x00, 0x17, 0x01, 0x00, 0x17, 0x05, 0x01, 0x00, 0x01, 0x09, 0x06, 
          0x01, 0x00, 0x14, 
          0x01, 0x00, 0x14, 
          0x05, 0x01, 0x00, 0x01, 0x09, 0x06, 
          0x01, 0x00, 0x14, 
          0x05, 
          0x01, 0x00, 0x0F, 
          0x14, 
          0x10, 0x02, 0x3E, 0x01, 0x00, 0x18, 
          0x01, 0x00, 0x00, 
          0x06, 
          0x0E, 0x01, 0x18, 
          0x01, 0x00, 0x17, 
          0x05, 
          0x01, 0x00, 0x10, 
          0x11, 
          0x10, 0x02, 0x53, 
          0x01, 0x00, 0x19, 
          0x01, 0x00, 0x01, 
          0x06, 
          0x01, 0x00, 0x19, 
          0x05, 
          0x19, 
          0x18]

index_input = [0x5, 0x4,  0xc, 0xb, 0x13, 0x12, 0x1a, 0x19, 0x21, 0x20, 0x28, 0x27, 0x2f, 0x2e, 0x36, 0x35]
stack = [0]*1000
store = [0]*100
input = [0x61,0x61,0x61,0x61,0x61,0x61,0x61,0x61,
         0x61,0x61,0x61,0x61,0x61,0x61,0x61,0x61]
for i in range(len(index_input)):
    vmcode[index_input[i]]=input[i]
# for i in range(len(vmcode)):
#     print(hex(vmcode[i]),end=",")
size = {0x1: 0x3, 0x2: 0x3, 0x3: 0x3, 0x4: 0x3, 0x5: 0x1, 0x6: 0x1, 0x7: 0x1, 0x8: 0x1, 0x9: 0x1, 0xa: 0x3, 0xb: 0x1, 0xc: 0x1, 0xd: 0x1, 0xe: 0x1, 0xf: 0x3, 0x10: 0x3, 0x11: 0x1, 0x12: 0x1, 0x13: 0x1, 0x14: 0x1, 0x15: 0x1, 0x16: 0x3, 0x17: 0x1, 0x18: 0x1, 0x19: 0x1, 0x1a: 0x1, 0x1b: 0x1, 0x1c: 0x1, 0x1d: 0x1, 0x1e: 0x1, 0x1f: 0x1, 0x20: 0x1, 0x21: 0x1, 0x22: 0x1, 0x23: 0x1, 0x24: 0x1, 0x25: 0x1, 0x26: 0x1}
count = 0
coutParam = 1
count_stack = 0
# for i in range(10):
#     print(f"{hex(vmcode[0x17d+i])}, ",end="")
# exit()
# 0xf910374
#print(hex(len(vmcode)))
while(1):     
    ##print()
    #print("opcode",hex(vmcode[count]))                        
    #print("countstack",count_stack)
    #print("stack: ",end="")
    #print(f"{[hex(i) for i in stack]}")

    #print("store: ",end="")
    #print(f"{[hex(store[i]) for i in range(30)]}")
    if(vmcode[count] > 0x13):
        if(vmcode[count]==0x14):
            a = stack[count_stack-2] > stack[count_stack-1]
            print(f"cmp {hex(stack[count_stack-2])} > {hex(stack[count_stack-1])} ")
            count_stack-=1
            stack[count_stack-1]=a
            stack[count_stack] = 0
            count+=1
            continue
        
        if(vmcode[count]==0x1A):
            a = stack[count_stack-1]
            b=  stack[count_stack-2]
            stack[count_stack-2] ^= stack[count_stack-1]
            stack[count_stack-1] = 0           
            print(f"xor {hex(b)}, {hex(a)} = {hex(stack[count_stack-2])}")
            count_stack-=1
            count+=1
            
            continue
        if(vmcode[count]==0x1C):
            a = stack[count_stack-1]
            b=  stack[count_stack-2]
            stack[count_stack-2] &= ctypes.c_uint32(stack[count_stack-1]).value
            stack[count_stack-1] = 0           
            print(f"and {hex(b)}, {hex(ctypes.c_uint8(a).value)} = {hex(stack[count_stack-2])}")
            count_stack-=1
            count+=1
            continue
        if(vmcode[count]==0x1D):
            a = stack[count_stack-1]
            b=  stack[count_stack-2]
            stack[count_stack-2] %= stack[count_stack-1]
            stack[count_stack-1] = 0           
            print(f"mod {hex(b)}, {hex(a)} = {hex(stack[count_stack-2])}")
            count_stack-=1
            count+=1
            continue
        if(vmcode[count]==0x1E):
            tmp = stack[count_stack-2]
            stack[count_stack-2]<<=stack[count_stack-1]
            print(f"shl {hex(tmp)}, {hex(stack[count_stack-1])} = {hex(stack[count_stack-2])}")
            stack[count_stack-1] = 0
            count_stack -=1
            count+=1
            continue
        if(vmcode[count]==0x1b):
            a = stack[count_stack-1]
            b=  stack[count_stack-2]
            stack[count_stack-2] |= stack[count_stack-1]
            stack[count_stack-1] = 0
            
            print(f"or {hex(b)}, {hex(a)} = {hex(stack[count_stack-2])}")
            count_stack-=1
            count+=1
            continue
        if(vmcode[count]==0x1f):
            a = stack[count_stack-2]
            b = stack[count_stack-1]
            stack[count_stack-2]>>=stack[count_stack-1]
            print(f"shr {hex(a)} >> {hex(b)} == {hex(stack[count_stack-2])}")
            count_stack -=1
            count+=1
            continue
        if(vmcode[count]==0x21):
            a = stack[count_stack-2]
            b = stack[count_stack-1]
            result = (((a << (0x20-b)))&0xffffffff) | (((a >> b))&0xffffffff)
            print(f"{hex(a)} << {hex((0x20-b))} | {hex(a)} >> {hex(b)} result = {hex(result)}")
            stack[count_stack-2]=result
            count_stack -=1
            count+=1
            continue  
        if(vmcode[count]==0x24):
            a = stack[count_stack-2]
            b = stack[count_stack-1]
            result = ((a >> (8-b))&0xff) | ((a << b)&0xff)
            print(f"{hex(a)} >> {hex((8-b))} | {hex(a)} << {hex(b)} result = {hex(result)}")
            stack[count_stack-2]=result
            count_stack -=1
            count+=1
            continue  
        if(vmcode[count]==0x25):
            a = stack[count_stack-2]
            b = stack[count_stack-1]
            result = ((a << (8-b))&0xff) | ((a >> b)&0xff)
            print(f"{hex(a)} << {hex((8-b))} | {hex(a)} >> {hex(b)} result = {hex(result)}")
            stack[count_stack-2]=result
            count_stack -=1
            count+=1
            continue 
        else:
            exit()    
    elif(vmcode[count] == 0x13):
        exit()
    elif(vmcode[count] <=9):
        if(vmcode[count] == 0):
            exit()
        elif(vmcode[count] == 1):
            a1= ctypes.c_uint8(vmcode[count+1]).value<<8
            a2 = ctypes.c_uint8(vmcode[count+2]).value
            a = a1+a2  
            stack[count_stack]=a
            print(f"push {hex(a)}")
            #print()
            count_stack +=1
            count+=3
            continue
        elif(vmcode[count] == 2):
            a=1
            exit()
        elif(vmcode[count] == 5):
            tmp = stack[count_stack-1]
            #print("stack Counter -1" ,stack[count_stack-1])
            a = store[stack[count_stack-1]]
            stack[count_stack-1] = a
            print(f"push {hex(stack[count_stack-1])}, from index store {hex(tmp)}")
            count+=1
            #print()
            continue
        elif(vmcode[count] == 6):
            store[stack[count_stack-2]]=stack[count_stack-1]
            #print()
            print(f"MOV STORE[{hex(stack[count_stack-2])}],{hex(stack[count_stack-1])}")
            stack[count_stack-1] = 0
            stack[count_stack-2] = 0
            count_stack-=2
            #print()
            count+=1
            continue
        elif(vmcode[count] == 9):
            a1= stack[count_stack-2]
            a2 = stack[count_stack-1]
            a = a1 +a2
            print(f"add {hex(a1)} + {hex(a2)} = {hex(a)}")
            stack[count_stack-2] = a
            stack[count_stack-1] = 0
            count_stack -=1
            count+=1            
            continue
        else:
            exit()
    elif(vmcode[count] == 0xd):
        if((stack[count_stack-1]<=100)):
            b= (stack[count_stack-1])%8
        else:
            b= stack[count_stack-1]
        a = stack[count_stack-2] * b
        print(f"mul {hex(stack[count_stack-2])} * {hex(b)} = {hex(a)}")
        count_stack-=1
        stack[count_stack-1]=a
        stack[count_stack] = 0
        count+=1 
        continue
    elif(vmcode[count] == 0xe):
        a1= ctypes.c_uint8(vmcode[count+1]).value<<8
        a2 = ctypes.c_uint8(vmcode[count+2]).value
        a = a1+a2
        print(f"check flag {hex(stack[count_stack-1])}, wrong go to {hex(a)}")
        count = a
    elif(vmcode[count] == 0x10):
        a1= ctypes.c_uint8(vmcode[count+1]).value<<8
        a2 = ctypes.c_uint8(vmcode[count+2]).value
        a = a1+a2
        print(f"check flag {hex(stack[count_stack-1])}, wrong go to {hex(a)}")
        if(stack[count_stack-1]):
            count+=3
            count_stack-=1
            continue
        count = a
    elif(vmcode[count] == 0x11):
        a = stack[count_stack-2] == stack[count_stack-1]
        print(f"cmp {hex(stack[count_stack-2])} == {hex(stack[count_stack-1])} ")
        count_stack-=1
        stack[count_stack-1]=a
        stack[count_stack] = 0
        count+=1
        continue
    elif(vmcode[count] == 0x12):
        a = stack[count_stack-2] < stack[count_stack-1]
        print(f"cmp {hex(stack[count_stack-2])} < {hex(stack[count_stack-1])} ")
        count_stack-=1
        stack[count_stack-1]=a
        stack[count_stack] = 0
        count+=1
        continue
    elif(vmcode[count] == 0xb):
        exit()
    else:
        exit()

