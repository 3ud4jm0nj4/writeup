rom = [0x00,0x06,0x00,0x01,0x01,0x06,0x0C,0x0D,0x01,0x06,0x00,0x08,0x01,0x05,0x01,0x06,0x22,0x38,0x01,0x06,0xFF,0x00,0x01,0x08,0x01,0x02,0x01,0x06,0x61,0x61,0x01,0x01,0x01,0x06,0x69,0x4E,0x01,0x00,0x00,0x07,0x00,0x00,0x01,0x06,0x0C,0x0D,0x01,0x06,0x2D,0x41,0x01,0x02,0x01,0x06,0x00,0x08,0x01,0x05,0x01,0x06,0x22,0x38,0x01,0x06,0x55,0x22,0x01,0x01,0x01,0x06,0xFF,0x00,0x01,0x08,0x01,0x02,0x01,0x06,0x61,0x61,0x01,0x01,0x01,0x06,0x32,0x6A,0x01,0x00,0x00,0x07,0x00,0x00,0x01,0x06,0x49,0x30,0x01,0x06,0x00,0x08,0x01,0x05,0x01,0x06,0x3E,0x5E,0x01,0x06,0xFF,0x00,0x01,0x08,0x01,0x02,0x01,0x06,0x61,0x61,0x01,0x01,0x01,0x06,0x45,0x0A,0x01,0x00,0x00,0x07,0x00,0x00,0x01,0x06,0x3B,0x20,0x01,0x06,0x00,0x08,0x01,0x05,0x01,0x06,0x6B,0x2D,0x01,0x06,0xFF,0x00,0x01,0x08,0x01,0x02,0x01,0x06,0x61,0x61,0x01,0x01,0x01,0x06,0x5B,0x78,0x01,0x00,0x00,0x07,0x00,0x00,0x01,0x06,0x2B,0x79,0x01,0x06,0x00,0x08,0x01,0x05,0x01,0x06,0x70,0x41,0x01,0x06,0xFF,0x00,0x01,0x08,0x01,0x02,0x01,0x06,0x61,0x61,0x01,0x01,0x01,0x06,0x37,0x45,0x01,0x00,0x00,0x07,0x00,0x00,0x01,0x06,0x78,0x79,0x01,0x06,0x00,0x08,0x01,0x05,0x01,0x06,0x34,0x41,0x01,0x06,0xFF,0x00,0x01,0x08,0x01,0x02,0x01,0x06,0x61,0x61,0x01,0x01,0x01,0x06,0x55,0x0A,0x01,0x00,0x00,0x07,0x00,0x00,0x01,0x06,0x6A,0x36,0x01,0x06,0x00,0x08,0x01,0x05,0x01,0x06,0x2D,0x01,0x01,0x06,0xFF,0x00,0x01,0x08,0x01,0x02,0x01,0x06,0x61,0x61,0x01,0x01,0x01,0x06,0x58,0x1E,0x01,0x00,0x00,0x07,0x00,0x00,0x01,0x06,0x75,0x1B,0x01,0x06,0x00,0x08,0x01,0x05,0x01,0x06,0x3B,0x17,0x01,0x06,0xFF,0x00,0x01,0x08,0x01,0x02,0x01,0x06,0x61,0x61,0x01,0x01,0x01,0x06,0x0F,0x19,0x01,0x00,0x00,0x07,0x00,0x00,0x01,0x06,0x77,0x7C,0x01,0x06,0x00,0x08,0x01,0x05,0x01,0x06,0x45,0x30,0x01,0x06,0xFF,0x00,0x01,0x08,0x01,0x02,0x01,0x06,0x61,0x61,0x01,0x01,0x01,0x06,0x76,0x03,0x01,0x00,0x00,0x07,0x00,0x00,0x01,0x06,0x0F,0x37,0x01,0x06,0x00,0x08,0x01,0x04,0x01,0x06,0x3B,0x23,0x01,0x06,0x00,0xFF,0x01,0x08,0x01,0x02,0x01,0x06,0x61,0x61,0x01,0x01,0x01,0x06,0x4A,0x12,0x01,0x00,0x00,0x07,0x00,0x00]

i = 0

stack = []

while i < len(rom):
    opcodeSize = 0
    word = -1
    byte = -1
    id = hex(i)[2:].ljust(5, ' ')
    print(id, end='')

    if rom[i + 1] == 6:
        opcodeSize = 4
        word = rom[i + 3] + (rom[i + 2] << 8)
        byte = rom[i]
    else:
        opcodeSize = 2
        byte = rom[i]

    match rom[i + 1]:
        case 0:
            print('EQUAL')
        case 1:
            print('XOR')
        case 2:
            print('ADD')
        case 3:
            print('SUB')
        case 4:
            print('SHL')
        case 5:
            print('SHR')
        case 6:
            print(f'PUSH {hex(word)}')
        case 7:
            print('POP')
        case 8:
            print('AND')

        case _:
            print(f'Invalid opcode {hex(rom[i + 1])}')
            break

    i += opcodeSize